{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/js/scripts.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","AliveStatus","Misc","g_oPhrases","ru","misc","statusShort","status","statusFull","en","g_aCrewmateColor","g_sLang","window","navigator","language","slice","getCssOverlayClass","aliveStatus","toLowerCase","getFullPhrase","hasOverlay","card","dataset","g_aCards","g_iRound","btnRound","document","querySelector","btnText","textContent","addEventListener","round","updateCardRound","resetCardRadio","onCloseBtnClick","this","classList","add","onStatusBtnClick","cardNum","bStatus","statuses","querySelectorAll","console","log","updateCardStatus","uncheckedCardRadio","content","that","setTimeout","remove","once","onMouseEnterBtn","innerHTML","onMouseOverBtn","onMouseEnterStatus","cardStatus","phrase","onMouseOverStatus","onClickStatus","elems","checked","checkedCardRadioByStatus","undefined","updateStatus","entries","click","location","reload","cardContainter","color","createElement","style","backgroundColor","text","statusContainer","append","bind","firstChild","btnContainer","setAttribute","verdictContainer","elem","createTextNode","controlContainer","btn","push","createCards"],"mappings":"CAAA,SAAAA,EAAAC,EAAAC,EAAAC,GAAA,SAAAC,EAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,IAAAE,EAAA,mBAAAC,SAAAA,QAAA,IAAAF,GAAAC,EAAA,OAAAA,EAAAF,GAAA,GAAA,GAAAI,EAAA,OAAAA,EAAAJ,GAAA,GAAA,IAAAK,EAAA,IAAAC,MAAA,uBAAAN,EAAA,KAAA,MAAAK,EAAAE,KAAA,mBAAAF,EAAA,IAAAG,EAAAX,EAAAG,GAAA,CAAAS,QAAA,IAAAb,EAAAI,GAAA,GAAAU,KAAAF,EAAAC,SAAA,SAAAd,GAAA,OAAAI,EAAAH,EAAAI,GAAA,GAAAL,IAAAA,KAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,OAAAD,EAAAG,GAAAS,QAAA,IAAA,IAAAL,EAAA,mBAAAD,SAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,IAAA,OAAAD,EAAA,CAAA,CAAAa,EAAA,CAAA,SAAAT,EAAAU,EAAAJ,GCMA,MAAAK,GACA,EADAA,EAEA,EAFAA,EAGA,EAHAA,EAIA,EAJAA,EAQA,EAGAC,EACA,EADAA,EAEA,EAFAA,EAGA,EAGAC,EAAA,CACAC,GAAA,CACAC,KAAA,CAAA,QAAA,cAAA,UACAC,YAAA,CAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,KACAC,OAAA,CAAA,UAAA,IAAA,UAAA,SAAA,WAAA,OAAA,YACAC,WAAA,CAAA,WAAA,cAAA,gBAAA,GAAA,GAAA,GAAA,KAEAC,GAAA,CACAJ,KAAA,CAAA,QAAA,eAAA,UACAC,YAAA,CAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,KACAC,OAAA,CAAA,UAAA,UAAA,UAAA,WAAA,WAAA,SAAA,WACAC,WAAA,CAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,MAIAE,EAAA,CAAA,UAAA,UAAA,UAAA,UAAA,UAAA,UAAA,UAAA,UAAA,UAAA,UAAA,UAAA,WACAC,EAAA,OAAAC,OAAAC,UAAAC,SAAAC,MAAA,EAAA,GAAA,KAAA,KACAC,EAAAC,GAAA,WAAAd,EAAAM,GAAAF,OAAAU,GAAAC,cACAC,EAAAF,GAAAd,EAAAQ,GAAAH,WAAAS,GAAAd,EAAAQ,GAAAH,WAAAS,GAAAd,EAAAQ,GAAAJ,OAAAU,GACAG,EAAAC,GAAAA,EAAAC,QAAAf,OAAAN,EAEAsB,EAAA,GAMA,IAAAC,EAAA,EACA,MACAC,EAAAC,SAAAC,cAAA,cACAC,EAAAF,SAAAC,cAAA,kBACAD,SAAAC,cAAA,mBACAE,YAAA1B,EAAAQ,GAAAN,KAAAH,GAEAuB,EAAAK,iBAAA,SA2GA,WACA,GAAAN,GAlHA,EAkHA,OAEA,IAAA,MAAAH,KAAAE,EACAF,EAAAC,QAAAS,MAAAP,EACAQ,EAAAX,EAAAD,EAAAC,GAAAA,EAAAC,QAAAf,OAAAN,GACAgC,EAAAZ,GAEAO,EAAAC,cAAAL,KAIA,SAAAU,IACAC,KAAAC,UAAAC,IAAA,aACAF,KAAAL,iBAAA,iBAAA,WACAK,KAAAC,UAAAC,IAAA,aAUA,SAAAC,EAAAC,EAAAtB,EAAAuB,GAAA,GAEA,MAAAC,EAAAN,KAAAO,iBAAA,gBAOA,GALAC,QAAAC,IAAA,4BAAAL,cAAAtB,kBAAAwB,EAAA3C,UAEAkC,EAAAG,MACAU,EAAAJ,EAAAN,KAAAb,QAAAS,OAAAd,GAEAuB,EAAA,CACAM,EAAAX,MACA,MAAAY,EAAAZ,KAAAR,cAAA,2BACAoB,EAAAX,UAAAC,IAAArB,EAAAC,IACA,MAAA+B,EAAAb,KAEAc,WAAA,KACAF,EAAAjB,iBAAA,QAAA,KACAa,QAAAC,IAAA,4BAAAL,oBACAQ,EAAAX,UAAAc,OAAAlC,EAAAC,IACAkB,KAAAb,QAAAf,OAAAN,EACAgC,EAAAe,GACAhB,EAAAgB,EAAA/C,IACA,CAAAkD,MAAA,KACA,KAEAhB,KAAAb,QAAAf,OAAAU,EAIA,SAAAmC,EAAAnC,EAAAuB,GAAA,GACAL,KAAAkB,UAAAlD,EAAAQ,GAAAN,KAAAmC,EAAAtC,EAAAA,GAAA,KAAAiB,EAAAF,GACAkB,KAAAC,UAAAC,IAAA,aAIA,SAAAiB,IACAnB,KAAAC,UAAAc,OAAA,aAIA,SAAAK,EAAAC,EAAAzB,GAEA,IAAA0B,EAAAtC,EAAAqC,EAAAlC,QAAAf,QACAkD,EAAAA,EAAA,KAAAA,EAAA,GACAtB,KAAAkB,UAAAlD,EAAAQ,GAAAN,KAAAH,GAAA,IAAA6B,EAAA0B,EACAtB,KAAAC,UAAAC,IAAA,aAIA,SAAAqB,IACAvB,KAAAC,UAAAc,OAAA,aAOA,SAAAS,EAAAtC,EAAAU,GACAI,KAAAb,QAAAf,QAAAN,IAGAmB,EAAAe,MACAW,EAAAzB,GAgBA,SAAAA,EAAAJ,GACA,MAAA2C,EAAAvC,EAAAqB,iBAAA,cAEA,IAAA,MAAA3D,KAAA6E,EACA7E,EAAAuC,QAAAf,QAAAU,IACAlC,EAAA8E,SAAA,GAnBAC,CAAAzC,EAAAc,KAAAb,QAAAf,QAEAc,EAAAC,QAAAS,MAAAA,EACAC,EAAAX,OAAA0C,GAAA,IAIA,SAAAjB,EAAAzB,GACA,MAAAuC,EAAAvC,EAAAqB,iBAAA,cACA,IAAA,MAAA3D,KAAA6E,EACA7E,EAAA8E,SAAA,EAcA,SAAA7B,EAAAX,EAAAJ,EAAAhB,EAAA+D,GAAA,GACA,MAAAvB,EAAApB,EAAAqB,iBAAA,gBAEA,IAAA,MAAAvD,EAAAoB,KAAAkC,EAAAwB,UACA1D,EAAA6B,UAAAc,OAAA,sBAEA/D,GAAAkC,EAAAC,QAAAS,QACAxB,EAAA6B,UAAAC,IAAA,sBAEA2B,GACAnB,EAAAtC,EAAAU,IAMA,SAAA4B,EAAAW,EAAAvC,GACAA,GAAAhB,IACAuD,EAAAH,UAAAlD,EAAAQ,GAAAL,YAAAW,IAEAuC,EAAAlC,QAAAf,OAAAU,EAKA,SAAAgB,EAAAZ,GACA,GAAAD,EAAAC,GACA,OAEA,MAAAuC,EAAAvC,EAAAqB,iBAAA,cAEA,IAAA,MAAA3D,KAAA6E,EACA7E,EAAAuC,QAAAf,QAAAN,GACAlB,EAAAmF,QA3PAxC,SAAAC,cAAA,gBACAG,iBAAA,SAAA,WACAJ,SAAAyC,SAAAC,YAUA,WACA,MAAAC,EAAA3C,SAAAC,cAAA,oBAEA,IAAA,MAAAY,EAAA+B,KAAA5D,EAAAuD,UAAA,CACA,MAAA5C,EAAAK,SAAA6C,cAAA,OACAlD,EAAAe,UAAAC,IAAA,QACAhB,EAAAmD,MAAAC,gBAAAH,EACAjD,EAAAC,QAAAf,OAAAN,EACAoB,EAAAC,QAAAS,MAAA,EAEA,MAAA2C,EAAAhD,SAAA6C,cAAA,MACAhC,EAAA,IACAmC,EAAAF,MAAAF,MAAA,QAEA,MAAAK,EAAAjD,SAAA6C,cAAA,OACAI,EAAAvC,UAAAC,IAAA,wBAAA,yBAEA,IAAA,IAAAlD,EAAA,EAAAA,EArCA,EAqCAA,IAAA,CACA,MAAAqE,EAAA9B,SAAA6C,cAAA,OACAf,EAAApB,UAAAC,IAAA,eACAsC,EAAAC,OAAApB,GACAA,EAAA1B,iBAAA,aAAAyB,EAAAsB,KAAAH,EAAAlB,EAAArE,EAAA,IACAqE,EAAA1B,iBAAA,WAAA4B,EAAAmB,KAAAH,IACAlB,EAAA1B,iBAAA,QAAA6B,EAAAkB,KAAArB,EAAAnC,EAAAlC,IACA0D,EAAAW,EAAArE,EAAAc,EAAAA,GAEA0E,EAAAG,WAAA1C,UAAAC,IAAA,sBAEA,MAAA0C,EAAArD,SAAA6C,cAAA,OACAQ,EAAA3C,UAAAC,IAAA,YAAA,yBACA0C,EAAAC,aAAA,OAAA,SACAD,EAAAC,aAAA,aAAA,qBAAAzC,GAEA,MAAA0C,EAAAvD,SAAA6C,cAAA,OACAU,EAAA7C,UAAAC,IAAA,yBAAA,yBAEA,IAAA,IAAA9B,EAAAN,EAAAM,GAAAN,EAAAM,IAAA,CACA,IAAA2E,EACA,MAAA1C,EAAAjC,EAAAN,EACAuC,GACA0C,EAAAxD,SAAA6C,cAAA,UACAW,EAAA9C,UAAAC,IAAA,cAAA,OAAArB,EAAAT,IACA0E,EAAAL,OAAAM,KAGAA,EAAAxD,SAAA6C,cAAA,SACAW,EAAA9C,UAAAC,IAAA,aACA6C,EAAAF,aAAA,OAAA,SACAE,EAAAF,aAAA,OAAA,YAAAzC,GACA2C,EAAAF,aAAA,KAAA,SAAAzC,KAAAhC,KACA2E,EAAAF,aAAA,eAAA,OACAE,EAAA5D,QAAAf,OAAAA,EACAA,IAAAN,GACAiF,EAAAF,aAAA,UAAA,IACAD,EAAAH,OAAAM,GAEAA,EAAAxD,SAAA6C,cAAA,SACAW,EAAA9C,UAAAC,IAAA,MAAA,cACA6C,EAAAF,aAAA,MAAA,SAAAzC,KAAAhC,KACA2E,EAAAN,OAAAlD,SAAAyD,eAAAhF,EAAAQ,GAAAJ,OAAAA,KAEAwE,EAAAH,OAAAM,IAEAA,EAAApD,iBAAA,QAAAQ,EAAAuC,KAAAxD,EAAAkB,EAAAhC,EAAAiC,IACA0C,EAAApD,iBAAA,aAAAsB,EAAAyB,KAAAH,EAAAnE,EAAAiC,IACA0C,EAAApD,iBAAA,WAAAwB,EAAAuB,KAAAH,IAGA,MAAAU,EAAA1D,SAAA6C,cAAA,OACAa,EAAAhD,UAAAC,IAAA,0BAEA+C,EAAAR,OAAAF,GAEA,MAAAW,EAAA3D,SAAA6C,cAAA,UACAc,EAAAjD,UAAAC,IAAA,aACAgD,EAAAvD,iBAAA,QAAAI,EAAA2C,KAAAxD,IACA+D,EAAAR,OAAAS,GAEA,MAAAtC,EAAArB,SAAA6C,cAAA,OACAxB,EAAAX,UAAAC,IAAA,yBAAA,yBAEAU,EAAA6B,OAAAD,GACA5B,EAAA6B,OAAAG,GACAhC,EAAA6B,OAAAK,GAEA5D,EAAAuD,OAAAQ,GACA/D,EAAAuD,OAAA7B,GAEAsB,EAAAO,OAAAvD,GACAE,EAAA+D,KAAAjE,IA3FAkE","file":"../scripts.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/*\n|--------------------------------------------------------------------------\n| Defines\n|--------------------------------------------------------------------------\n*/\n// indexes in phrases[lang].statusFull & phrases[lang].statusShort\nconst AliveStatus = {\n    Empty: -1,\n    Defended: 0,\n    Unknown: 1,\n    Suspect: 2,\n    Crewmate: 3,\n    Imposter: 4,\n    Killed: 5,\n    Ejected: 6\n};\n// indexes in phrases[lang].misc\nconst Misc = {\n    Round: 0,\n    Result: 1,\n    Status: 2\n};\n\nconst g_oPhrases = {\n    \"ru\": {\n        misc: [\"Раунд\", \"Итог раунда\", \"Статус\"],\n        statusShort: [\"Н\", \"?\", \"П\", \"М\", \"И\", \"У\", \"В\"],\n        status: [\"Надежн.\", \"?\", \"Подозр.\", \"Мирный\", \"Импостер\", \"Убит\", \"Выброшен\"],\n        statusFull: [\"Надежный\", \"Неизвестный\", \"Подозреваемый\", \"\", \"\", \"\", \"\"]\n    },\n    \"en\": {\n        misc: [\"Round\", \"Round result\", \"Status\"],\n        statusShort: [\"T\", \"?\", \"S\", \"C\", \"I\", \"K\", \"E\"],\n        status: [\"Trusted\", \"Unknown\", \"Suspect\", \"Crewmate\", \"Impostor\", \"Killed\", \"Ejected\"],\n        statusFull: [\"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n    }\n};\n\nconst g_aCrewmateColor = [\"#132ED1\", \"#3F474E\", \"#6B31BC\", \"#71491E\", \"#C51111\", \"#117F2D\", \"#ED54BA\", \"#EF7D0E\", \"#50EF39\", \"#F6F658\", \"#38FEDB\", \"#D6E0F0\"];\nconst g_sLang = window.navigator.language.slice(0, 2) === \"ru\" ? \"ru\" : \"en\";\nconst getCssOverlayClass = (aliveStatus) => \"overlay-\" + g_oPhrases.en.status[aliveStatus].toLowerCase();\nconst getFullPhrase = (aliveStatus) => g_oPhrases[g_sLang].statusFull[aliveStatus] ? g_oPhrases[g_sLang].statusFull[aliveStatus] : g_oPhrases[g_sLang].status[aliveStatus];\nconst hasOverlay = (card) => card.dataset.status > AliveStatus.Suspect;\n/** @type {HTMLDivElement[]} */\nconst g_aCards = [];\n/*\n|--------------------------------------------------------------------------\n| Round Control\n|--------------------------------------------------------------------------\n*/\nlet g_iRound = 1;\nconst MAX_ROUND = 8;\nconst btnRound = document.querySelector(\".btn-round\");\nconst btnText = document.querySelector(\".btn-round-num\");\nconst btnRoundText = document.querySelector(\".btn-round-text\");\nbtnRoundText.textContent = g_oPhrases[g_sLang].misc[Misc.Round];\n\nbtnRound.addEventListener(\"click\", onRoundBtnClick);\n\nconst btnRestart = document.querySelector(\".btn-restart\");\nbtnRestart.addEventListener(\"click\", function () {\n    document.location.reload();\n});\n\n/*\n|--------------------------------------------------------------------------\n| Create Cards\n|--------------------------------------------------------------------------\n*/\ncreateCards();\n\nfunction createCards() {\n    const cardContainter = document.querySelector(\".card-containter\");\n\n    for (const [cardNum, color] of g_aCrewmateColor.entries()) {\n        const card = document.createElement(\"div\");\n        card.classList.add(\"card\");\n        card.style.backgroundColor = color;\n        card.dataset.status = AliveStatus.Unknown;\n        card.dataset.round = 0;\n\n        const text = document.createElement(\"h6\");\n        if (cardNum > 5)\n            text.style.color = \"#000\";\n\n        const statusContainer = document.createElement(\"div\");\n        statusContainer.classList.add(\"card-status-container\", \"card-container-indent\");\n\n        for (let i = 0; i < MAX_ROUND; i++) {\n            const cardStatus = document.createElement(\"div\");\n            cardStatus.classList.add(\"card-status\");\n            statusContainer.append(cardStatus);\n            cardStatus.addEventListener(\"mouseenter\", onMouseEnterStatus.bind(text, cardStatus, i + 1));\n            cardStatus.addEventListener(\"mouseout\", onMouseOverStatus.bind(text));\n            cardStatus.addEventListener(\"click\", onClickStatus.bind(cardStatus, card, i));\n            updateCardStatus(cardStatus, i ? AliveStatus.Empty : AliveStatus.Unknown);\n        }\n        statusContainer.firstChild.classList.add(\"card-status-active\");\n\n        const btnContainer = document.createElement(\"div\");\n        btnContainer.classList.add(\"btn-group\", \"card-container-indent\");\n        btnContainer.setAttribute(\"role\", \"group\");\n        btnContainer.setAttribute(\"aria-label\", \"Round status card \" + cardNum);\n\n        const verdictContainer = document.createElement(\"div\");\n        verdictContainer.classList.add(\"card-verdict-container\", \"card-container-indent\");\n\n        for (let status = AliveStatus.Defended; status <= AliveStatus.Ejected; status++) {\n            let elem;\n            const bStatus = status > AliveStatus.Suspect;\n            if (bStatus) {\n                elem = document.createElement(\"button\");\n                elem.classList.add(\"btn-verdict\", \"btn-\" + getCssOverlayClass(status));\n                verdictContainer.append(elem);\n            }\n            else {\n                elem = document.createElement(\"input\");\n                elem.classList.add(\"btn-check\");\n                elem.setAttribute(\"type\", \"radio\");\n                elem.setAttribute(\"name\", `btnradio-${cardNum}`);\n                elem.setAttribute(\"id\", `radio-${cardNum}-${status}`);\n                elem.setAttribute(\"autocomplete\", \"off\");\n                elem.dataset.status = status;\n                if (status === AliveStatus.Unknown)\n                    elem.setAttribute(\"checked\", \"\");\n                btnContainer.append(elem);\n\n                elem = document.createElement(\"label\");\n                elem.classList.add(\"btn\", \"btn-status\");\n                elem.setAttribute(\"for\", `radio-${cardNum}-${status}`);\n                elem.append(document.createTextNode(g_oPhrases[g_sLang].status[status]));\n                // elem.dataset.status = status;\n                btnContainer.append(elem);\n            }\n            elem.addEventListener(\"click\", onStatusBtnClick.bind(card, cardNum, status, bStatus));\n            elem.addEventListener(\"mouseenter\", onMouseEnterBtn.bind(text, status, bStatus));\n            elem.addEventListener(\"mouseout\", onMouseOverBtn.bind(text));\n        }\n\n        const controlContainer = document.createElement(\"div\");\n        controlContainer.classList.add(\"card-control-container\");\n\n        controlContainer.append(text);\n\n        const btn = document.createElement(\"button\");\n        btn.classList.add(\"btn-close\");\n        btn.addEventListener(\"click\", onCloseBtnClick.bind(card));\n        controlContainer.append(btn);\n\n        const content = document.createElement(\"div\");\n        content.classList.add(\"card-content-container\", \"card-container-indent\");\n\n        content.append(statusContainer);\n        content.append(btnContainer);\n        content.append(verdictContainer);\n\n        card.append(controlContainer);\n        card.append(content);\n\n        cardContainter.append(card);\n        g_aCards.push(card);\n    }\n}\n\nfunction onRoundBtnClick() {\n    if (g_iRound >= MAX_ROUND) return;\n\n    for (const card of g_aCards) {\n        card.dataset.round = g_iRound;\n        updateCardRound(card, hasOverlay(card) ? card.dataset.status : AliveStatus.Unknown);\n        resetCardRadio(card);\n    }\n    btnText.textContent = ++g_iRound;\n}\n\n/** @this {HTMLDivElement} */\nfunction onCloseBtnClick() {\n    this.classList.add(\"opacity-0\");\n    this.addEventListener(\"transitionend\", function () {\n        this.classList.add(\"hidden\");\n    });\n}\n\n/*\n|--------------------------------------------------------------------------\n| Card Logic\n|--------------------------------------------------------------------------\n*/\n/** @this {HTMLButtonElement} */\nfunction onStatusBtnClick(cardNum, aliveStatus, bStatus = false) {\n    /** @type {HTMLDivElement[]} */\n    const statuses = this.querySelectorAll(\".card-status\");\n\n    console.log(`onStatusBtnClick > Card: ${cardNum}, status: ${aliveStatus}, statusNums: ${statuses.length}`);\n\n    updateCardRound(this);\n    updateCardStatus(statuses[this.dataset.round], aliveStatus);\n\n    if (bStatus) {\n        uncheckedCardRadio(this);\n        const content = this.querySelector(\".card-content-container\");\n        content.classList.add(getCssOverlayClass(aliveStatus));\n        const that = this;\n\n        setTimeout(() => {\n            content.addEventListener(\"click\", () => {\n                console.log(`onStatusBtnClick > Card: ${cardNum} Remove overlay`);\n                content.classList.remove(getCssOverlayClass(aliveStatus));\n                this.dataset.status = AliveStatus.Unknown;\n                resetCardRadio(that);\n                updateCardRound(that, AliveStatus.Unknown);\n            }, { once: true });\n        }, 200);\n    }\n    this.dataset.status = aliveStatus;\n}\n\n/** @this {HTMLTextElement} */\nfunction onMouseEnterBtn(aliveStatus, bStatus = false) {\n    this.innerHTML = g_oPhrases[g_sLang].misc[bStatus ? Misc.Status : Misc.Result] + \": \" + getFullPhrase(aliveStatus);\n    this.classList.add(\"opacity-1\");\n}\n\n/** @this {HTMLButtonElement} */\nfunction onMouseOverBtn() {\n    this.classList.remove(\"opacity-1\");\n}\n\n/** @this {HTMLTextElement} */\nfunction onMouseEnterStatus(cardStatus, round) {\n\n    let phrase = getFullPhrase(cardStatus.dataset.status);\n    phrase = phrase ? (\": \" + phrase) : \"\";\n    this.innerHTML = g_oPhrases[g_sLang].misc[Misc.Round] + \" \" + round + phrase;\n    this.classList.add(\"opacity-1\");\n}\n\n/** @this {HTMLTextElement} */\nfunction onMouseOverStatus() {\n    this.classList.remove(\"opacity-1\");\n}\n\n/** \n * @param {HTMLDivElement} card\n * @this {HTMLDivElement} \n */\nfunction onClickStatus(card, round) {\n    if (this.dataset.status == AliveStatus.Empty)\n        return;\n\n    if (hasOverlay(this))\n        uncheckedCardRadio(card);\n    else\n        checkedCardRadioByStatus(card, this.dataset.status);\n\n    card.dataset.round = round;\n    updateCardRound(card, undefined, false);\n}\n\n/** @param {HTMLDivElement} card */\nfunction uncheckedCardRadio(card) {\n    const elems = card.querySelectorAll(\".btn-check\");\n    for (const e of elems) {\n        e.checked = false;\n    }\n}\n/** @param {HTMLDivElement} card */\nfunction checkedCardRadioByStatus(card, aliveStatus) {\n    const elems = card.querySelectorAll(\".btn-check\");\n\n    for (const e of elems) {\n        if (e.dataset.status == aliveStatus)\n            e.checked = true;\n    }\n}\n\n/** @param {HTMLDivElement} card */\nfunction updateCardRound(card, aliveStatus = AliveStatus.Empty, updateStatus = true) {\n    const statuses = card.querySelectorAll(\".card-status\");\n\n    for (const [i, status] of statuses.entries()) {\n        status.classList.remove(\"card-status-active\");\n\n        if (i == card.dataset.round) {\n            status.classList.add(\"card-status-active\");\n\n            if (updateStatus)\n                updateCardStatus(status, aliveStatus);\n        }\n    }\n}\n\n/** @param {HTMLDivElement} cardStatus */\nfunction updateCardStatus(cardStatus, aliveStatus) {\n    if (aliveStatus != AliveStatus.Empty)\n        cardStatus.innerHTML = g_oPhrases[g_sLang].statusShort[aliveStatus];\n\n    cardStatus.dataset.status = aliveStatus;\n    // console.log(aliveStatus);\n}\n\n/** @param {HTMLDivElement} card */\nfunction resetCardRadio(card) {\n    if (hasOverlay(card))\n        return;\n\n    const elems = card.querySelectorAll(\".btn-check\");\n\n    for (const e of elems) {\n        if (e.dataset.status == AliveStatus.Unknown)\n            e.click();\n    }\n}\n"]}