{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/js/scripts.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","AliveStatus","Misc","g_oPhrases","ru","misc","statusShort","status","statusFull","en","g_aCrewmateColor","g_sLang","window","navigator","language","slice","getCssOverlayClass","aliveStatus","toLowerCase","getFullPhrase","hasOverlay","card","dataset","g_aCards","g_iRound","btnRound","document","querySelector","btnText","textContent","addEventListener","round","updateCardRound","resetCardRadio","classList","remove","cardStatuses","querySelectorAll","cardStatus","entries","updateCardStatus","cardContainter","colorContainter","cardNum","color","createElement","add","style","backgroundColor","text","statusContainer","append","onMouseEnterStatus","bind","onMouseOverStatus","onClickStatus","firstChild","btnContainer","setAttribute","verdictContainer","elem","bStatus","createTextNode","onStatusBtnClick","onMouseEnterBtn","onMouseOverBtn","controlContainer","colorClose","cardCloseCallback","onCardCloseBtnClick","btn","content","push","contains","this","removeEventListener","onHide","statuses","console","log","uncheckedCardRadio","setTimeout","once","innerHTML","phrase","elems","checked","checkedCardRadioByStatus","undefined","updateStatus","click"],"mappings":"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","file":"../scripts.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/*\n|--------------------------------------------------------------------------\n| Defines\n|--------------------------------------------------------------------------\n*/\n// indexes in phrases[lang].statusFull & phrases[lang].statusShort\nconst AliveStatus = {\n    Empty: -1,\n    Defended: 0,\n    Unknown: 1,\n    Suspect: 2,\n    Crewmate: 3,\n    Imposter: 4,\n    Killed: 5,\n    Ejected: 6\n};\n// indexes in phrases[lang].misc\nconst Misc = {\n    Round: 0,\n    Result: 1,\n    Status: 2\n};\n\nconst g_oPhrases = {\n    \"ru\": {\n        misc: [\"Раунд\", \"Итог раунда\", \"Статус\"],\n        statusShort: [\"Н\", \"?\", \"П\", \"М\", \"И\", \"У\", \"В\"],\n        status: [\"Надежн.\", \"?\", \"Подозр.\", \"Мирный\", \"Импостер\", \"Убит\", \"Выброшен\"],\n        statusFull: [\"Надежный\", \"Неизвестный\", \"Подозреваемый\", \"\", \"\", \"\", \"\"]\n    },\n    \"en\": {\n        misc: [\"Round\", \"Round result\", \"Status\"],\n        statusShort: [\"T\", \"?\", \"S\", \"C\", \"I\", \"K\", \"E\"],\n        status: [\"Trusted\", \"Unknown\", \"Suspect\", \"Crewmate\", \"Impostor\", \"Killed\", \"Ejected\"],\n        statusFull: [\"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n    }\n};\n\nconst g_aCrewmateColor = [\"#731B13\", \"#132ED1\", \"#3F474E\", \"#6B31BC\", \"#71491E\", \"#C51111\", \"#117F2D\", \"#ED54BA\", \"#EF7D0E\", \"#EC7578\", \"#708497\", \"#50EF39\", \"#928776\", \"#F6F658\", \"#38FEDB\", \"#ECC0D3\", \"#FFFDBE\", \"#D6E0F0\"];\nconst g_sLang = window.navigator.language.slice(0, 2) === \"ru\" ? \"ru\" : \"en\";\nconst getCssOverlayClass = (aliveStatus) => \"overlay-\" + g_oPhrases.en.status[aliveStatus].toLowerCase();\nconst getFullPhrase = (aliveStatus) => g_oPhrases[g_sLang].statusFull[aliveStatus] ? g_oPhrases[g_sLang].statusFull[aliveStatus] : g_oPhrases[g_sLang].status[aliveStatus];\nconst hasOverlay = (card) => card.dataset.status > AliveStatus.Suspect;\n/** @type {HTMLDivElement[]} */\nconst g_aCards = [];\n/*\n|--------------------------------------------------------------------------\n| Round Control\n|--------------------------------------------------------------------------\n*/\nlet g_iRound = 1;\nconst MAX_ROUND = 8;\nconst btnRound = document.querySelector(\".btn-round\");\nconst btnText = document.querySelector(\".btn-round-num\");\nconst btnRoundText = document.querySelector(\".btn-round-text\");\nbtnRoundText.textContent = g_oPhrases[g_sLang].misc[Misc.Round];\n\nbtnRound.addEventListener(\"click\", onRoundBtnClick);\n\nconst btnRestart = document.querySelector(\".btn-restart\");\nbtnRestart.addEventListener(\"click\", onResetBtnClick);\n/*\n|--------------------------------------------------------------------------\n| Create Cards\n|--------------------------------------------------------------------------\n*/\nconst cardContainter = document.querySelector(\".card-containter\");\nconst colorContainter = document.querySelector(\".color-container\");\n\nfor (const [cardNum, color] of g_aCrewmateColor.entries()) {\n    // cards\n    const card = document.createElement(\"div\");\n    card.classList.add(\"card\");\n    card.style.backgroundColor = color;\n    card.dataset.status = AliveStatus.Unknown;\n    card.dataset.round = 0;\n\n    const text = document.createElement(\"h6\");\n    if (cardNum > 6)\n        text.style.color = \"#000\";\n\n    const statusContainer = document.createElement(\"div\");\n    statusContainer.classList.add(\"card-status-container\", \"card-container-indent\");\n\n    for (let i = 0; i < MAX_ROUND; i++) {\n        const cardStatus = document.createElement(\"div\");\n        cardStatus.classList.add(\"card-status\");\n        statusContainer.append(cardStatus);\n        cardStatus.addEventListener(\"mouseenter\", onMouseEnterStatus.bind(text, cardStatus, i + 1));\n        cardStatus.addEventListener(\"mouseout\", onMouseOverStatus.bind(text));\n        cardStatus.addEventListener(\"click\", onClickStatus.bind(cardStatus, card, i));\n        updateCardStatus(cardStatus, i ? AliveStatus.Empty : AliveStatus.Unknown);\n    }\n    statusContainer.firstChild.classList.add(\"card-status-active\");\n\n    const btnContainer = document.createElement(\"div\");\n    btnContainer.classList.add(\"btn-group\", \"card-container-indent\");\n    btnContainer.setAttribute(\"role\", \"group\");\n    btnContainer.setAttribute(\"aria-label\", \"Round status card \" + cardNum);\n\n    const verdictContainer = document.createElement(\"div\");\n    verdictContainer.classList.add(\"card-verdict-container\", \"card-container-indent\");\n\n    for (let status = AliveStatus.Defended; status <= AliveStatus.Ejected; status++) {\n        let elem;\n        const bStatus = status > AliveStatus.Suspect;\n        if (bStatus) {\n            elem = document.createElement(\"button\");\n            elem.classList.add(\"btn-verdict\", \"btn-\" + getCssOverlayClass(status));\n            verdictContainer.append(elem);\n        }\n        else {\n            elem = document.createElement(\"input\");\n            elem.classList.add(\"btn-check\");\n            elem.setAttribute(\"type\", \"radio\");\n            elem.setAttribute(\"name\", `btnradio-${cardNum}`);\n            elem.setAttribute(\"id\", `radio-${cardNum}-${status}`);\n            elem.setAttribute(\"autocomplete\", \"off\");\n            elem.dataset.status = status;\n            if (status === AliveStatus.Unknown)\n                elem.setAttribute(\"checked\", \"\");\n            btnContainer.append(elem);\n\n            elem = document.createElement(\"label\");\n            elem.classList.add(\"btn\", \"btn-status\");\n            elem.setAttribute(\"for\", `radio-${cardNum}-${status}`);\n            elem.append(document.createTextNode(g_oPhrases[g_sLang].status[status]));\n            // elem.dataset.status = status;\n            btnContainer.append(elem);\n        }\n        elem.addEventListener(\"click\", onStatusBtnClick.bind(card, cardNum, status, bStatus));\n        elem.addEventListener(\"mouseenter\", onMouseEnterBtn.bind(text, status, bStatus));\n        elem.addEventListener(\"mouseout\", onMouseOverBtn.bind(text));\n    }\n\n    const controlContainer = document.createElement(\"div\");\n    controlContainer.classList.add(\"card-control-container\");\n\n    controlContainer.append(text);\n\n    // color control\n    const colorClose = document.createElement(\"div\");\n    colorClose.classList.add(\"color-close\");\n    colorClose.style.backgroundColor = color;\n    colorContainter.append(colorClose);\n    const cardCloseCallback = onCardCloseBtnClick.bind(card, colorClose, cardNum);\n    colorClose.addEventListener(\"click\", cardCloseCallback);\n\n    const btn = document.createElement(\"button\");\n    btn.classList.add(\"btn-close\");\n    btn.addEventListener(\"click\", cardCloseCallback);\n    controlContainer.append(btn);\n\n    const content = document.createElement(\"div\");\n    content.classList.add(\"card-content-container\", \"card-container-indent\");\n\n    content.append(statusContainer);\n    content.append(btnContainer);\n    content.append(verdictContainer);\n\n    card.append(controlContainer);\n    card.append(content);\n\n    cardContainter.append(card);\n    g_aCards.push(card);\n}\n\nfunction onRoundBtnClick() {\n    if (g_iRound >= MAX_ROUND) return;\n\n    for (const card of g_aCards) {\n        card.dataset.round = g_iRound;\n        updateCardRound(card, hasOverlay(card) ? card.dataset.status : AliveStatus.Unknown);\n        resetCardRadio(card);\n    }\n    btnText.textContent = ++g_iRound;\n}\n\n/** @this {HTMLDivElement} */\nfunction onCardCloseBtnClick(colorClose) {\n    // show\n    if (colorClose.classList.contains(\"color-closed\")) {\n        colorClose.classList.remove(\"color-closed\", \"hidden\", \"opacity-0\");\n        this.classList.remove(\"hidden\", \"opacity-0\");\n        this.removeEventListener(\"transitionend\", onHide);\n    }\n    // hide\n    else {\n        colorClose.classList.add(\"color-closed\");\n        this.classList.add(\"opacity-0\");\n        this.addEventListener(\"transitionend\", onHide);\n    }\n\n}\n\nfunction onHide() {\n    this.classList.add(\"hidden\");\n}\n\nfunction onResetBtnClick() {\n    g_iRound = 1;\n    btnText.textContent = g_iRound;\n    // document.location.reload();\n    for (const card of g_aCards) {\n        // remove overlay\n        const content = card.querySelector(\".card-content-container\");\n        content.classList.remove(getCssOverlayClass(card.dataset.status));\n\n        // reset data/btns\n        card.dataset.round = 0;\n        card.dataset.status = AliveStatus.Unknown;\n        updateCardRound(card, AliveStatus.Unknown);\n        resetCardRadio(card);\n\n        // reset statuses\n        const cardStatuses = card.querySelectorAll(\".card-status\");\n\n        for (const [i, cardStatus] of cardStatuses.entries()) {\n            updateCardStatus(cardStatus, i ? AliveStatus.Empty : AliveStatus.Unknown);\n        }\n    }\n}\n/*\n|--------------------------------------------------------------------------\n| Card Logic\n|--------------------------------------------------------------------------\n*/\n/** @this {HTMLButtonElement} */\nfunction onStatusBtnClick(cardNum, aliveStatus, bStatus = false) {\n    /** @type {HTMLDivElement[]} */\n    const statuses = this.querySelectorAll(\".card-status\");\n\n    console.log(`onStatusBtnClick > Card: ${cardNum}, status: ${aliveStatus}, statusNums: ${statuses.length}`);\n\n    updateCardRound(this);\n    updateCardStatus(statuses[this.dataset.round], aliveStatus);\n\n    if (bStatus) {\n        uncheckedCardRadio(this);\n        const content = this.querySelector(\".card-content-container\");\n        content.classList.add(getCssOverlayClass(aliveStatus));\n\n        setTimeout(() => {\n            content.addEventListener(\"click\", () => {\n                console.log(`onStatusBtnClick > Card: ${cardNum} Remove overlay`);\n                content.classList.remove(getCssOverlayClass(aliveStatus));\n                this.dataset.status = AliveStatus.Unknown;\n                resetCardRadio(this);\n                updateCardRound(this, AliveStatus.Unknown);\n            }, { once: true });\n        }, 200);\n    }\n    this.dataset.status = aliveStatus;\n}\n\n/** @this {HTMLTextElement} */\nfunction onMouseEnterBtn(aliveStatus, bStatus = false) {\n    this.innerHTML = g_oPhrases[g_sLang].misc[bStatus ? Misc.Status : Misc.Result] + \": \" + getFullPhrase(aliveStatus);\n    this.classList.add(\"opacity-1\");\n}\n\n/** @this {HTMLButtonElement} */\nfunction onMouseOverBtn() {\n    this.classList.remove(\"opacity-1\");\n}\n\n/** @this {HTMLTextElement} */\nfunction onMouseEnterStatus(cardStatus, round) {\n    let phrase = getFullPhrase(cardStatus.dataset.status);\n    phrase = phrase ? (\": \" + phrase) : \"\";\n    this.innerHTML = g_oPhrases[g_sLang].misc[Misc.Round] + \" \" + round + phrase;\n    this.classList.add(\"opacity-1\");\n}\n\n/** @this {HTMLTextElement} */\nfunction onMouseOverStatus() {\n    this.classList.remove(\"opacity-1\");\n}\n\n/** \n * @param {HTMLDivElement} card\n * @this {HTMLDivElement} \n */\nfunction onClickStatus(card, round) {\n    if (this.dataset.status == AliveStatus.Empty)\n        return;\n\n    if (hasOverlay(this))\n        uncheckedCardRadio(card);\n    else\n        checkedCardRadioByStatus(card, this.dataset.status);\n\n    card.dataset.round = round;\n    updateCardRound(card, undefined, false);\n}\n\n/** @param {HTMLDivElement} card */\nfunction uncheckedCardRadio(card) {\n    const elems = card.querySelectorAll(\".btn-check\");\n    for (const e of elems) {\n        e.checked = false;\n    }\n}\n/** @param {HTMLDivElement} card */\nfunction checkedCardRadioByStatus(card, aliveStatus) {\n    const elems = card.querySelectorAll(\".btn-check\");\n\n    for (const e of elems) {\n        if (e.dataset.status == aliveStatus)\n            e.checked = true;\n    }\n}\n\n/** @param {HTMLDivElement} card */\nfunction updateCardRound(card, aliveStatus = AliveStatus.Empty, updateStatus = true) {\n    const statuses = card.querySelectorAll(\".card-status\");\n\n    for (const [i, status] of statuses.entries()) {\n        status.classList.remove(\"card-status-active\");\n\n        if (i == card.dataset.round) {\n            status.classList.add(\"card-status-active\");\n\n            if (updateStatus)\n                updateCardStatus(status, aliveStatus);\n        }\n    }\n}\n\n/** @param {HTMLDivElement} cardStatus */\nfunction updateCardStatus(cardStatus, aliveStatus) {\n    if (aliveStatus != AliveStatus.Empty)\n        cardStatus.innerHTML = g_oPhrases[g_sLang].statusShort[aliveStatus];\n    else\n        cardStatus.innerHTML = \"\";\n\n    cardStatus.dataset.status = aliveStatus;\n}\n\n/** @param {HTMLDivElement} card */\nfunction resetCardRadio(card) {\n    if (hasOverlay(card))\n        return;\n\n    const elems = card.querySelectorAll(\".btn-check\");\n\n    for (const e of elems) {\n        if (e.dataset.status == AliveStatus.Unknown)\n            e.click();\n    }\n}\n/*\n|--------------------------------------------------------------------------\n| Sotrable\n|--------------------------------------------------------------------------\n*/\n/* const { Sortable } = require(\"@shopify/draggable\");\n\nnew Sortable(document.querySelector(\".card-containter\"), {\n    draggable: \".card\",\n    delay: { mouse: 1000, drag: 1000, touch: 1000 }\n}); */"]}