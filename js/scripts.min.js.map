{"version":3,"sources":["main.js"],"names":["AliveStatus","Empty","Defended","Unknown","Suspect","Crewmate","Imposter","Killed","Ejected","Misc","Round","Result","Status","g_oPhrases","ru","misc","statusShort","status","statusFull","en","g_aCrewmateColor","g_sLang","window","navigator","language","slice","getCssOverlayClass","aliveStatus","toLowerCase","getFullPhrase","hasOverlay","card","dataset","g_aCards","g_iRound","MAX_ROUND","btnRound","document","querySelector","btnText","btnRoundText","textContent","addEventListener","onRoundBtnClick","btnRestart","createCards","cardContainter","cardNum","color","entries","createElement","classList","add","style","backgroundColor","round","text","statusContainer","i","cardStatus","append","onMouseEnterStatus","bind","onMouseOverStatus","onClickStatus","updateCardStatus","firstChild","btnContainer","setAttribute","verdictContainer","elem","bStatus","createTextNode","onStatusBtnClick","onMouseEnterBtn","onMouseOverBtn","controlContainer","btn","onCloseBtnClick","content","push","updateCardRound","resetCardRadio","this","statuses","querySelectorAll","console","log","length","uncheckedCardRadio","that","setTimeout","remove","once","innerHTML","phrase","checkedCardRadioByStatus","undefined","elems","e","checked","updateStatus","click","location","reload"],"mappings":"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","file":"scripts.min.js","sourcesContent":["/*\r\n|--------------------------------------------------------------------------\r\n| Defines\r\n|--------------------------------------------------------------------------\r\n*/\r\n// indexes in phrases[lang].statusFull & phrases[lang].statusShort\r\nconst AliveStatus = {\r\n    Empty: -1,\r\n    Defended: 0,\r\n    Unknown: 1,\r\n    Suspect: 2,\r\n    Crewmate: 3,\r\n    Imposter: 4,\r\n    Killed: 5,\r\n    Ejected: 6\r\n};\r\n// indexes in phrases[lang].misc\r\nconst Misc = {\r\n    Round: 0,\r\n    Result: 1,\r\n    Status: 2\r\n};\r\n\r\nconst g_oPhrases = {\r\n    \"ru\": {\r\n        misc: [\"Раунд\", \"Итог раунда\", \"Статус\"],\r\n        statusShort: [\"Н\", \"?\", \"П\", \"М\", \"И\", \"У\", \"В\"],\r\n        status: [\"Надежн.\", \"?\", \"Подозр.\", \"Мирный\", \"Импостер\", \"Убит\", \"Выброшен\"],\r\n        statusFull: [\"Надежный\", \"Неизвестный\", \"Подозреваемый\", \"\", \"\", \"\", \"\"]\r\n    },\r\n    \"en\": {\r\n        misc: [\"Round\", \"Round result\", \"Status\"],\r\n        statusShort: [\"T\", \"?\", \"S\", \"C\", \"I\", \"K\", \"E\"],\r\n        status: [\"Trusted\", \"Unknown\", \"Suspect\", \"Crewmate\", \"Impostor\", \"Killed\", \"Ejected\"],\r\n        statusFull: [\"\", \"\", \"\", \"\", \"\", \"\", \"\"],\r\n    }\r\n};\r\n\r\nconst g_aCrewmateColor = [\"#132ED1\", \"#3F474E\", \"#6B31BC\", \"#71491E\", \"#C51111\", \"#117F2D\", \"#ED54BA\", \"#EF7D0E\", \"#50EF39\", \"#F6F658\", \"#38FEDB\", \"#D6E0F0\"];\r\nconst g_sLang = window.navigator.language.slice(0, 2) === \"ru\" ? \"ru\" : \"en\";\r\nconst getCssOverlayClass = (aliveStatus) => \"overlay-\" + g_oPhrases.en.status[aliveStatus].toLowerCase();\r\nconst getFullPhrase = (aliveStatus) => g_oPhrases[g_sLang].statusFull[aliveStatus] ? g_oPhrases[g_sLang].statusFull[aliveStatus] : g_oPhrases[g_sLang].status[aliveStatus];\r\nconst hasOverlay = (card) => card.dataset.status > AliveStatus.Suspect;\r\n/** @type {HTMLDivElement[]} */\r\nconst g_aCards = [];\r\n/*\r\n|--------------------------------------------------------------------------\r\n| Round Control\r\n|--------------------------------------------------------------------------\r\n*/\r\nlet g_iRound = 1;\r\nconst MAX_ROUND = 8;\r\nconst btnRound = document.querySelector(\".btn-round\");\r\nconst btnText = document.querySelector(\".btn-round-num\");\r\nconst btnRoundText = document.querySelector(\".btn-round-text\");\r\nbtnRoundText.textContent = g_oPhrases[g_sLang].misc[Misc.Round];\r\n\r\nbtnRound.addEventListener(\"click\", onRoundBtnClick);\r\n\r\nconst btnRestart = document.querySelector(\".btn-restart\");\r\nbtnRestart.addEventListener(\"click\", function () {\r\n    document.location.reload();\r\n});\r\n\r\n/*\r\n|--------------------------------------------------------------------------\r\n| Create Cards\r\n|--------------------------------------------------------------------------\r\n*/\r\ncreateCards();\r\n\r\nfunction createCards() {\r\n    const cardContainter = document.querySelector(\".card-containter\");\r\n\r\n    for (const [cardNum, color] of g_aCrewmateColor.entries()) {\r\n        const card = document.createElement(\"div\");\r\n        card.classList.add(\"card\");\r\n        card.style.backgroundColor = color;\r\n        card.dataset.status = AliveStatus.Unknown;\r\n        card.dataset.round = 0;\r\n\r\n        const text = document.createElement(\"h6\");\r\n        if (cardNum > 5)\r\n            text.style.color = \"#000\";\r\n\r\n        const statusContainer = document.createElement(\"div\");\r\n        statusContainer.classList.add(\"card-status-container\", \"card-container-indent\");\r\n\r\n        for (let i = 0; i < MAX_ROUND; i++) {\r\n            const cardStatus = document.createElement(\"div\");\r\n            cardStatus.classList.add(\"card-status\");\r\n            statusContainer.append(cardStatus);\r\n            cardStatus.addEventListener(\"mouseenter\", onMouseEnterStatus.bind(text, cardStatus, i + 1));\r\n            cardStatus.addEventListener(\"mouseout\", onMouseOverStatus.bind(text));\r\n            cardStatus.addEventListener(\"click\", onClickStatus.bind(cardStatus, card, i));\r\n            updateCardStatus(cardStatus, i ? AliveStatus.Empty : AliveStatus.Unknown);\r\n        }\r\n        statusContainer.firstChild.classList.add(\"card-status-active\");\r\n\r\n        const btnContainer = document.createElement(\"div\");\r\n        btnContainer.classList.add(\"btn-group\", \"card-container-indent\");\r\n        btnContainer.setAttribute(\"role\", \"group\");\r\n        btnContainer.setAttribute(\"aria-label\", \"Round status card \" + cardNum);\r\n\r\n        const verdictContainer = document.createElement(\"div\");\r\n        verdictContainer.classList.add(\"card-verdict-container\", \"card-container-indent\");\r\n\r\n        for (let status = AliveStatus.Defended; status <= AliveStatus.Ejected; status++) {\r\n            let elem;\r\n            const bStatus = status > AliveStatus.Suspect;\r\n            if (bStatus) {\r\n                elem = document.createElement(\"button\");\r\n                elem.classList.add(\"btn-verdict\", \"btn-\" + getCssOverlayClass(status));\r\n                verdictContainer.append(elem);\r\n            }\r\n            else {\r\n                elem = document.createElement(\"input\");\r\n                elem.classList.add(\"btn-check\");\r\n                elem.setAttribute(\"type\", \"radio\");\r\n                elem.setAttribute(\"name\", `btnradio-${cardNum}`);\r\n                elem.setAttribute(\"id\", `radio-${cardNum}-${status}`);\r\n                elem.setAttribute(\"autocomplete\", \"off\");\r\n                elem.dataset.status = status;\r\n                if (status === AliveStatus.Unknown)\r\n                    elem.setAttribute(\"checked\", \"\");\r\n                btnContainer.append(elem);\r\n\r\n                elem = document.createElement(\"label\");\r\n                elem.classList.add(\"btn\", \"btn-status\");\r\n                elem.setAttribute(\"for\", `radio-${cardNum}-${status}`);\r\n                elem.append(document.createTextNode(g_oPhrases[g_sLang].status[status]));\r\n                // elem.dataset.status = status;\r\n                btnContainer.append(elem);\r\n            }\r\n            elem.addEventListener(\"click\", onStatusBtnClick.bind(card, cardNum, status, bStatus));\r\n            elem.addEventListener(\"mouseenter\", onMouseEnterBtn.bind(text, status, bStatus));\r\n            elem.addEventListener(\"mouseout\", onMouseOverBtn.bind(text));\r\n        }\r\n\r\n        const controlContainer = document.createElement(\"div\");\r\n        controlContainer.classList.add(\"card-control-container\");\r\n\r\n        controlContainer.append(text);\r\n\r\n        const btn = document.createElement(\"button\");\r\n        btn.classList.add(\"btn-close\");\r\n        btn.addEventListener(\"click\", onCloseBtnClick.bind(card));\r\n        controlContainer.append(btn);\r\n\r\n        const content = document.createElement(\"div\");\r\n        content.classList.add(\"card-content-container\", \"card-container-indent\");\r\n\r\n        content.append(statusContainer);\r\n        content.append(btnContainer);\r\n        content.append(verdictContainer);\r\n\r\n        card.append(controlContainer);\r\n        card.append(content);\r\n\r\n        cardContainter.append(card);\r\n        g_aCards.push(card);\r\n    }\r\n}\r\n\r\nfunction onRoundBtnClick() {\r\n    if (g_iRound >= MAX_ROUND) return;\r\n\r\n    for (const card of g_aCards) {\r\n        card.dataset.round = g_iRound;\r\n        updateCardRound(card, hasOverlay(card) ? card.dataset.status : AliveStatus.Unknown);\r\n        resetCardRadio(card);\r\n    }\r\n    btnText.textContent = ++g_iRound;\r\n}\r\n\r\n/** @this {HTMLDivElement} */\r\nfunction onCloseBtnClick() {\r\n    this.classList.add(\"opacity-0\");\r\n    this.addEventListener(\"transitionend\", function () {\r\n        this.classList.add(\"hidden\");\r\n    });\r\n}\r\n\r\n/*\r\n|--------------------------------------------------------------------------\r\n| Card Logic\r\n|--------------------------------------------------------------------------\r\n*/\r\n/** @this {HTMLButtonElement} */\r\nfunction onStatusBtnClick(cardNum, aliveStatus, bStatus = false) {\r\n    /** @type {HTMLDivElement[]} */\r\n    const statuses = this.querySelectorAll(\".card-status\");\r\n\r\n    console.log(`onStatusBtnClick > Card: ${cardNum}, status: ${aliveStatus}, statusNums: ${statuses.length}`);\r\n\r\n    updateCardRound(this);\r\n    updateCardStatus(statuses[this.dataset.round], aliveStatus);\r\n\r\n    if (bStatus) {\r\n        uncheckedCardRadio(this);\r\n        const content = this.querySelector(\".card-content-container\");\r\n        content.classList.add(getCssOverlayClass(aliveStatus));\r\n        const that = this;\r\n\r\n        setTimeout(() => {\r\n            content.addEventListener(\"click\", () => {\r\n                console.log(`onStatusBtnClick > Card: ${cardNum} Remove overlay`);\r\n                content.classList.remove(getCssOverlayClass(aliveStatus));\r\n                this.dataset.status = AliveStatus.Unknown;\r\n                resetCardRadio(that);\r\n                updateCardRound(that, AliveStatus.Unknown);\r\n            }, { once: true });\r\n        }, 200);\r\n    }\r\n    this.dataset.status = aliveStatus;\r\n}\r\n\r\n/** @this {HTMLTextElement} */\r\nfunction onMouseEnterBtn(aliveStatus, bStatus = false) {\r\n    this.innerHTML = g_oPhrases[g_sLang].misc[bStatus ? Misc.Status : Misc.Result] + \": \" + getFullPhrase(aliveStatus);\r\n    this.classList.add(\"opacity-1\");\r\n}\r\n\r\n/** @this {HTMLButtonElement} */\r\nfunction onMouseOverBtn() {\r\n    this.classList.remove(\"opacity-1\");\r\n}\r\n\r\n/** @this {HTMLTextElement} */\r\nfunction onMouseEnterStatus(cardStatus, round) {\r\n\r\n    let phrase = getFullPhrase(cardStatus.dataset.status);\r\n    phrase = phrase ? (\": \" + phrase) : \"\";\r\n    this.innerHTML = g_oPhrases[g_sLang].misc[Misc.Round] + \" \" + round + phrase;\r\n    this.classList.add(\"opacity-1\");\r\n}\r\n\r\n/** @this {HTMLTextElement} */\r\nfunction onMouseOverStatus() {\r\n    this.classList.remove(\"opacity-1\");\r\n}\r\n\r\n/** \r\n * @param {HTMLDivElement} card\r\n * @this {HTMLDivElement} \r\n */\r\nfunction onClickStatus(card, round) {\r\n    if (this.dataset.status == AliveStatus.Empty)\r\n        return;\r\n\r\n    if (hasOverlay(this))\r\n        uncheckedCardRadio(card);\r\n    else\r\n        checkedCardRadioByStatus(card, this.dataset.status);\r\n\r\n    card.dataset.round = round;\r\n    updateCardRound(card, undefined, false);\r\n}\r\n\r\n/** @param {HTMLDivElement} card */\r\nfunction uncheckedCardRadio(card) {\r\n    const elems = card.querySelectorAll(\".btn-check\");\r\n    for (const e of elems) {\r\n        e.checked = false;\r\n    }\r\n}\r\n/** @param {HTMLDivElement} card */\r\nfunction checkedCardRadioByStatus(card, aliveStatus) {\r\n    const elems = card.querySelectorAll(\".btn-check\");\r\n\r\n    for (const e of elems) {\r\n        if (e.dataset.status == aliveStatus)\r\n            e.checked = true;\r\n    }\r\n}\r\n\r\n/** @param {HTMLDivElement} card */\r\nfunction updateCardRound(card, aliveStatus = AliveStatus.Empty, updateStatus = true) {\r\n    const statuses = card.querySelectorAll(\".card-status\");\r\n\r\n    for (const [i, status] of statuses.entries()) {\r\n        status.classList.remove(\"card-status-active\");\r\n\r\n        if (i == card.dataset.round) {\r\n            status.classList.add(\"card-status-active\");\r\n\r\n            if (updateStatus)\r\n                updateCardStatus(status, aliveStatus);\r\n        }\r\n    }\r\n}\r\n\r\n/** @param {HTMLDivElement} cardStatus */\r\nfunction updateCardStatus(cardStatus, aliveStatus) {\r\n    if (aliveStatus != AliveStatus.Empty)\r\n        cardStatus.innerHTML = g_oPhrases[g_sLang].statusShort[aliveStatus];\r\n\r\n    cardStatus.dataset.status = aliveStatus;\r\n    // console.log(aliveStatus);\r\n}\r\n\r\n/** @param {HTMLDivElement} card */\r\nfunction resetCardRadio(card) {\r\n    if (hasOverlay(card))\r\n        return;\r\n\r\n    const elems = card.querySelectorAll(\".btn-check\");\r\n\r\n    for (const e of elems) {\r\n        if (e.dataset.status == AliveStatus.Unknown)\r\n            e.click();\r\n    }\r\n}\r\n"]}