{"version":3,"sources":["main.js"],"names":["AliveStatus","Empty","Defended","Unknown","Suspect","Crewmate","Imposter","Killed","Ejected","Misc","Round","g_oPhrases","ru","misc","statusShort","statusFull","en","g_aCrewmateColor","g_sLang","window","navigator","language","slice","getCssOverlayClass","aliveStatus","toLowerCase","hasOverlay","card","dataset","status","g_iRound","MAX_ROUND","btnRound","document","querySelector","btnText","btnRoundText","textContent","addEventListener","onRoundBtnClick","btnRestart","createCards","cardContainter","cardNum","color","entries","createElement","classList","add","style","backgroundColor","statusContainer","i","createCardStatus","firstChild","btnContainer","setAttribute","verdictContainer","elem","append","createTextNode","onStatusBtnClick","bind","btn","controlContainer","closeCard","content","console","log","this","parentElement","overlay","statuses","querySelectorAll","length","updateCardRound","updateCardStatus","resetCardBtn","setTimeout","remove","once","updateCardsRound","forEach","rootElem","cardStatus","innerHTML","cards","resetCardsBtn","getCardOfChild","child","contains","btnsCheck","btnCheck","click","location","reload"],"mappings":"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","file":"scripts.min.js","sourcesContent":["/*\r\n|--------------------------------------------------------------------------\r\n| Defines\r\n|--------------------------------------------------------------------------\r\n*/\r\n// indexes in phrases[lang].statusFull & phrases[lang].statusShort\r\nconst AliveStatus = {\r\n    Empty: -1,\r\n    Defended: 0,\r\n    Unknown: 1,\r\n    Suspect: 2,\r\n    Crewmate: 3,\r\n    Imposter: 4,\r\n    Killed: 5,\r\n    Ejected: 6\r\n};\r\n// indexes in phrases[lang].misc\r\nconst Misc = {\r\n    Round: 0\r\n};\r\n\r\nconst g_oPhrases = {\r\n    \"ru\": {\r\n        misc: [\"Раунд\"],\r\n        statusShort: [\"К\", \"?\", \"Ч\", \"М\", \"И\", \"У\", \"В\"],\r\n        statusFull: [\"Красный\", \"?\", \"Черный\", \"Мирный\", \"Импостер\", \"Убит\", \"Выброшен\"]\r\n    },\r\n    \"en\": {\r\n        misc: [\"Round\"],\r\n        statusShort: [\"D\", \"?\", \"S\", \"C\", \"I\", \"K\", \"E\"],\r\n        statusFull: [\"Defended\", \"Unknown\", \"Suspect\", \"Crewmate\", \"Impostor\", \"Killed\", \"Ejected\"]\r\n    }\r\n};\r\n\r\nconst g_aCrewmateColor = [\"#132ED1\", \"#3F474E\", \"#6B31BC\", \"#71491E\", \"#C51111\", \"#117F2D\", \"#ED54BA\", \"#EF7D0E\", \"#50EF39\", \"#F6F658\", \"#38FEDB\", \"#D6E0F0\"];\r\nconst g_sLang = window.navigator.language.slice(0, 2) === \"ru\" ? \"ru\" : \"en\";\r\nconst getCssOverlayClass = (aliveStatus) => \"overlay-\" + g_oPhrases.en.statusFull[aliveStatus].toLowerCase();\r\nconst hasOverlay = (card) => card.dataset.status > AliveStatus.Suspect;\r\n/*\r\n|--------------------------------------------------------------------------\r\n| Round Control\r\n|--------------------------------------------------------------------------\r\n*/\r\nlet g_iRound = 1;\r\nconst MAX_ROUND = 8;\r\nconst btnRound = document.querySelector(\".btn-round\");\r\nconst btnText = document.querySelector(\".btn-round-num\");\r\nconst btnRoundText = document.querySelector(\".btn-round-text\");\r\nbtnRoundText.textContent = g_oPhrases[g_sLang].misc[Misc.Round];\r\n\r\nbtnRound.addEventListener(\"click\", function () {\r\n    if (g_iRound >= MAX_ROUND) return;\r\n    btnText.textContent = ++g_iRound;\r\n    onRoundBtnClick();\r\n});\r\n\r\nconst btnRestart = document.querySelector(\".btn-restart\");\r\nbtnRestart.addEventListener(\"click\", function () {\r\n    document.location.reload();\r\n});\r\n\r\n/*\r\n|--------------------------------------------------------------------------\r\n| Create Cards\r\n|--------------------------------------------------------------------------\r\n*/\r\ncreateCards();\r\n\r\nfunction createCards() {\r\n    const cardContainter = document.querySelector(\".card-containter\");\r\n\r\n    for (const [cardNum, color] of g_aCrewmateColor.entries()) {\r\n        const card = document.createElement(\"div\");\r\n        card.classList.add(\"card\");\r\n        card.style.backgroundColor = color;\r\n        card.dataset.status = AliveStatus.Unknown;\r\n\r\n        const statusContainer = document.createElement(\"div\");\r\n        statusContainer.classList.add(\"card-status-container\", \"card-container-indent\");\r\n\r\n        for (let i = 0; i < MAX_ROUND; i++) {\r\n            createCardStatus(statusContainer, i ? AliveStatus.Empty : AliveStatus.Unknown);\r\n        }\r\n        statusContainer.firstChild.classList.add(\"card-status-active\");\r\n\r\n        const btnContainer = document.createElement(\"div\");\r\n        btnContainer.classList.add(\"btn-group\", \"card-container-indent\");\r\n        btnContainer.setAttribute(\"role\", \"group\");\r\n        btnContainer.setAttribute(\"aria-label\", \"Round status card \" + cardNum);\r\n\r\n        const verdictContainer = document.createElement(\"div\");\r\n        verdictContainer.classList.add(\"card-verdict-container\", \"card-container-indent\");\r\n\r\n        for (let status = AliveStatus.Defended; status <= AliveStatus.Ejected; status++) {\r\n            if (status < AliveStatus.Crewmate) {\r\n                let elem = document.createElement(\"input\");\r\n                elem.classList.add(\"btn-check\");\r\n                elem.setAttribute(\"type\", \"radio\");\r\n                elem.setAttribute(\"name\", `btnradio-${cardNum}`);\r\n                elem.setAttribute(\"id\", `radio-${cardNum}-${status}`);\r\n                elem.setAttribute(\"autocomplete\", \"off\");\r\n                elem.dataset.status = status;\r\n                if (status === AliveStatus.Unknown)\r\n                    elem.setAttribute(\"checked\", \"\");\r\n                btnContainer.append(elem);\r\n\r\n                elem = document.createElement(\"label\");\r\n                elem.classList.add(\"btn\", \"btn-status\");\r\n                elem.setAttribute(\"for\", `radio-${cardNum}-${status}`);\r\n                elem.append(document.createTextNode(g_oPhrases[g_sLang].statusFull[status]));\r\n                // elem.dataset.status = status;\r\n                btnContainer.append(elem);\r\n                elem.addEventListener(\"click\", onStatusBtnClick.bind(card, cardNum, status));\r\n            }\r\n            else {\r\n                const btn = document.createElement(\"button\");\r\n                btn.classList.add(\"btn-verdict\", \"btn-\" + getCssOverlayClass(status));\r\n                btn.addEventListener(\"click\", onStatusBtnClick.bind(card, cardNum, status, true));\r\n                verdictContainer.append(btn);\r\n            }\r\n        }\r\n\r\n        const controlContainer = document.createElement(\"div\");\r\n        controlContainer.classList.add(\"card-control-container\");\r\n\r\n        const btn = document.createElement(\"button\");\r\n        btn.classList.add(\"btn-close\");\r\n        btn.addEventListener(\"click\", closeCard);\r\n        controlContainer.append(btn);\r\n\r\n        const content = document.createElement(\"div\");\r\n        content.classList.add(\"card-content-container\", \"card-container-indent\");\r\n        //content.dataset.status = AliveStatus.Empty;\r\n\r\n        content.append(statusContainer);\r\n        content.append(btnContainer);\r\n        content.append(verdictContainer);\r\n\r\n        card.append(controlContainer);\r\n        card.append(content);\r\n\r\n        cardContainter.append(card);\r\n    }\r\n}\r\n\r\nfunction closeCard() {\r\n    console.log(\"close card\", this.parentElement.parentElement);\r\n    this.parentElement.parentElement.classList.add(\"hidden\");\r\n}\r\n/*\r\n|--------------------------------------------------------------------------\r\n| Card Logic\r\n|--------------------------------------------------------------------------\r\n*/\r\n/** @this {HTMLButtonElement} */\r\nfunction onStatusBtnClick(cardNum, aliveStatus, overlay = false) {\r\n    /** @type {HTMLDivElement} */\r\n    const statusContainer = this.querySelector(\".card-status-container\");\r\n    /** @type {HTMLDivElement[]} */\r\n    const statuses = statusContainer.querySelectorAll(\"*\");\r\n\r\n    console.log(`onStatusBtnClick > Card: ${cardNum}, status: ${aliveStatus}, statusNums: ${statuses.length}`);\r\n\r\n    updateCardRound(statusContainer);\r\n    updateCardStatus(statuses[g_iRound - 1], aliveStatus);\r\n\r\n    if (overlay) {\r\n        resetCardBtn(this);\r\n        const content = this.querySelector(\".card-content-container\");\r\n        content.classList.add(getCssOverlayClass(aliveStatus));\r\n\r\n        setTimeout(() => {\r\n            content.addEventListener(\"click\", () => {\r\n                console.log(`onStatusBtnClick > Card: ${cardNum} Remove overlay`);\r\n                content.classList.remove(getCssOverlayClass(aliveStatus));\r\n                this.dataset.status = AliveStatus.Unknown;\r\n                //setStatusContainerChildsVis(statusContainer, false);\r\n                // updateStatusContainer(statusContainer);\r\n            }, { once: true });\r\n        }, 200);\r\n    }\r\n    this.dataset.status = aliveStatus;\r\n}\r\n\r\nfunction updateCardsRound() {\r\n    /** @type {HTMLDivElement[]} */\r\n    const statusContainers = document.querySelector(\".card-status-container\");\r\n    statusContainers.forEach(updateCardRound);\r\n}\r\n\r\n/** @param {HTMLDivElement} statusContainer */\r\nfunction updateCardRound(statusContainer, aliveStatus = AliveStatus.Empty) {\r\n    const statuses = statusContainer.querySelectorAll(\"*\");\r\n\r\n    for (const [i, status] of statuses.entries()) {\r\n        status.classList.remove(\"card-status-active\");\r\n\r\n        if (i === g_iRound - 1) {\r\n            status.classList.add(\"card-status-active\");\r\n            updateCardStatus(status, aliveStatus);\r\n        }\r\n    }\r\n}\r\n\r\n/** @param {HTMLDivElement} rootElem */\r\nfunction createCardStatus(rootElem, aliveStatus) {\r\n    const cardStatus = document.createElement(\"div\");\r\n    cardStatus.classList.add(\"card-status\");\r\n    // cardStatus.dataset.status = aliveStatus;\r\n    updateCardStatus(cardStatus, aliveStatus);\r\n    rootElem.append(cardStatus);\r\n}\r\n\r\n/** @param {HTMLDivElement} cardStatus */\r\nfunction updateCardStatus(cardStatus, aliveStatus) {\r\n    if (aliveStatus != AliveStatus.Empty)\r\n        cardStatus.innerHTML = g_oPhrases[g_sLang].statusShort[aliveStatus];\r\n    //cardStatus.dataset.status = aliveStatus;\r\n    //console.log(\"updateCardStatus >\", cardStatus);\r\n}\r\n\r\nfunction onRoundBtnClick() {\r\n    /** @type {HTMLDivElement[]} */\r\n    const cards = document.querySelectorAll(\".card\");\r\n\r\n    for (const card of cards) {\r\n        /** @type {HTMLDivElement[]} */\r\n        const statusContainer = card.querySelector(\".card-status-container\");\r\n        updateCardRound(statusContainer, hasOverlay(card) ? card.dataset.status : AliveStatus.Unknown);\r\n    }\r\n\r\n    resetCardsBtn();\r\n}\r\n\r\n/** @param {HTMLDivElement} child */\r\nfunction getCardOfChild(child) {\r\n    while (child && child.parentElement) {\r\n        if (child.parentElement.classList.contains(\"card\"))\r\n            return child.parentElement;\r\n        child = child.parentElement;\r\n    }\r\n}\r\n\r\nfunction resetCardsBtn() {\r\n    /** @type {HTMLDivElement[]} */\r\n    const cards = document.querySelectorAll(\".card\");\r\n    cards.forEach(resetCardBtn);\r\n}\r\n\r\n/** @param {HTMLDivElement} card */\r\nfunction resetCardBtn(card) {\r\n    if (hasOverlay(card))\r\n        return;\r\n\r\n    const btnsCheck = card.querySelectorAll(\".btn-check\");\r\n\r\n    for (const btnCheck of btnsCheck)\r\n        if (btnCheck.dataset.status == AliveStatus.Unknown)\r\n            btnCheck.click();\r\n}\r\n"]}